---
title: 'Scoring'
published: true
author: sacha
date: 0004/01/01
blog_name: docs
section: 4
blurb: "Telescope's scoring algorithm."
---

Telescope's scoring algorithm is fairly standard, but does include a few subtleties. 

### The Goal of All Popularity Algorithms

If you want to dress fashionably, you don't really care that orange was popular 3 years ago. You want to know if it's popular *now*. Similarly, popularity algorithms are concerned with two factors: popularity (number of votes) and time (time since those votes). 

### Our Algorithm

Calculating popularity based on the time of individual votes would be ideal, but it would also be fairly complex. So instead, we're using the time of item submission as a milestone. 

So, to sum things up: getting votes makes an item more popular, and getting older makes it less popular. Kinda like in politics, actually. 

The formula looks something like this:

```
  score = numberOfVotes / Math.pow(age, 1.3);
```

We're raising the age to the power of 1.3 (which is a more or less random value by the way) because we don't want score to decrease linearly, but exponentially. 

### When Does It Run?

Our algorithm runs in two cases:

1. Somebody does an action that affects a post's score (i.e. upvoting or downvoting)
2. Every 30 seconds (that value is customizable in the settings panel)

Note that in the second case, the algorithm runs for *every* post in the database (or almost â€” more on this later).

### Unequal Votes

Unlike in a democracy, Telescope doesn't even try to pretend that everybody has the same voting power. 

No, in Telescope everybody's not equal and who you are affects your vote's power. For example, regular users have a power of 1, while admins have a power of 5. 

So our formular becomes: 

```
  score = numberOfPoints / Math.pow(age, 1.3);
```

Where `numberOfPoints` can be greater than `numberOfVotes` if an admin has cast their vote. 

In the future, voting power will also be affected by karma. So a user with a very high karma will have a louder voice than a newcomer. 

### Lazy Scoring

The scoring algorithm runs every 30 seconds. But we must remember we're only interested in scores because they let us rank items by popularity. 

If the ranks don't change, then running the scoring algorithm has been useless. 

While we can't avoid running the scoring algorithm, we can at least avoid committing its results to the database if it doesn't affect the rankings (which will in turn prevent Meteor from pushing the new value to all connected clients).

Since it's hard to know exactly when rankings have been affected or not, we're cheating by using a fixed value (`x`) instead. We only commit results to the database if the difference between the current score and the freshly calculated score is greater than `x`. 

To get this value `x`, we calculate the "power" of a single vote after `n` days. We will assume that after n days, a single vote will not be powerful enough to affect posts' ranking order.

The value of `n` depends on how much votes your posts are getting: the more votes you get, the lower `n` can be. 

### Inactive Flag

Note that if the score difference is lower than `x`, not only do we not update the database, but we also set an `inactive` flag to leave that post our of future calculations completely and save us some CPU cycles. 

That flag will be removed if somebody ever takes an action that affects the post's score directly (i.e. upvoting or downvoting). 