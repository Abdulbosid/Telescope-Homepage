---
title: 'Updating Telescope'
published: true
author: sacha
date: 0001/01/04
blog_name: docs
section: 1
blurb: "Keeping your app up to date."
order: 4
---

Keeping your version of Telescope up to date is important to benefit from the latest bug fixes and improvements. 

### Git Remotes

You can update your local Git repository using the `git pull` command from within your project directory to pull in the latest changes:

```
git pull
```

Now if you've customized Telescope or forked it on GitHub, your `origin` remote might not be pointing to the Telescope repo.

For example, you might have an `origin` repo pointing to your own fork on GitHub, and a `heroku` remote pointing to your Heroku instance. 

In that case, the first step will be adding the Telescope repo back as a remote:

```
git remote add telescope https://github.com/TelescopeJS/Telescope.git
```

You'll then be able to specify you want to pull from the `master` branch of the `telescope` remote:

```
git pull telescope master
```

### Git Conflicts And The `.packages` File

If you've made use of third-party packages or your own local packages to customize Telescope, you will probably get Git conflicts in `.meteor/packages`. 

That file contains a list of all packages used in your app. In fact, behind the scenes all `meteor add some:package` and `meteor remove some:package` do is add and remove entries in that file. 

Suppose that on Monday, the master branch gets updated with a new `telescope-official-package` package. But on *Tuesday*, you add your *own* `my-custom-package` package to the list.

Now when you go to pull in the latest version on Wednesday, Git doesn't know whether to use the master branch's `.packages`, or your own, more recent (but lacking the `telescope-official-package` package) version. 

In desperation, Git gives up and throws in a bunch of weird `<<======= HEAD` symbols in your code. 

What you have to do is go through the problematic file, remove the weird Git conflicts markings, and figure out for yourself the appropriate list of packages (in our example, that would be having *both* `telescope-official-package` and `my-custom-package` packages). 

### Name Changes

Let's imagine that in the next version of Telescope, the `telescope-official-package` gets renamed to `telescope-super-official-package`. 

When Git sees the new `telescope-super-official-package` package, it will clone it to your local repo. But it will *not* delete the older `telescope-official-package` package. 

For that reason, whenever you notice a package or directory has been renamed, make sure to manually remove the older version. 