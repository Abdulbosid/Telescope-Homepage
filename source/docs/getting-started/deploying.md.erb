---
title: 'Deploying'
published: true
author: sacha
date: 0001/01/03
blog_name: docs
section: 1
blurb: "Deploying your app to test and production servers."
order: 3
video: true
---

There are many ways to deploy Telescope, and here are a few of them. 

Note that this is meant as an introduction to these various options, not as a replacement for reading their respective documentation.

### Option 1: Meteor.com

You can deploy any Meteor app to Meteor's own free hosting on *.meteor.com. 

You'll find more information about it [in the official Meteor documentation](http://docs.meteor.com/#deploying), but be warned that this free offering is not suitable for production apps, and will not be able to handle large amount of traffic. 

#### Pros

- Free.
- Super-simple.
- Just works out of the box.

#### Cons

- Not production-ready.

#### What To Do

- `meteor deploy xyz` where "xyz" is the name of your app.

### Option 2: MeteorUp + Digital Ocean + Compose.io

You can easily deploy on your own server, such as a [Digital Ocean](https://www.digitalocean.com/), [Amazon EC2](http://aws.amazon.com/ec2/), or [Linode](https://www.linode.com/) instance using a tool called [Meteor Up](https://github.com/arunoda/meteor-up), or `mup` for short.

<div class="video docs-video">
  <h4>Deploying With Digital Ocean, Compose.io, and Meteor Up</h4>
  <iframe width="420" height="278" src="//www.youtube.com/embed/WLGdXtZMmiI" frameborder="0" allowfullscreen></iframe>
</div>

Just fill in your instance's IP along with your ssh username (by default, `root` on Digital Ocean and `ubuntu` on AWS) and password, and Meteor Up will take care of the server setup and any subsequent deployments for you. 

I personally recommend [Digital Ocean](https://www.digitalocean.com/) for their cheap prices, clean dashboard, and great support. But make sure you pick at least a 1 GB instance ($10/month), as Telescope tends to use up all available memory and lock up on smaller instances.

<% note do %>

### A Note About Database Hosting

Although you can host your MongoDB database on the same server as your app, it's recommended you use a dedicated, third-party service like [Compose.io](http://compose.io) to host it. This will give you many advantages, such as:

- A web dashboard that lets you access and even modify your database online.
- Automated back-ups.
- Professional support by MongoDB experts.
- [Oplog](https://meteorhacks.com/mongodb-oplog-and-meteor.html) support (makes your Meteor app run faster!).
- Having your database hosted independently makes it a lot easier to switch servers if you need to. 

Although Oplog support costs $18/month, you can get started for free with a Sandbox instance. 

<% end %>

#### Pros

- Easy to port your whole app to another service.
- Open-source and configurable.

#### Cons

- A bit more involved.
- Not free.

#### What To Do

- Open a Compose.io account, create a database, and note its Mongo URL.
- Open a Digital Ocean account, create a droplet, and note its access credentials.
- Install Meteor Up, set up your options, then run `mup setup` and `mup deploy`. 

<% note do %>

### Troubleshooting

If Meteor Up's deployment process fails, run the `mup logs -f` command in another terminal window to stream the logs and try deploying again to help identify the issue. 

<% end %>

### Option 3: Modulus

Another great option is deploying on [Modulus](https://modulus.io/). Thanks to their command line tool, you can deploy Meteor apps very easily, and the service is quite affordable at around $15 per month for the cheapest plans. 

You'll find more information about their deployment process [on the Modulus site](https://modulus.io/codex/meteor_apps). 

#### Pros

- Dedicated Node.js/Meteor support.
- Easy to scale.

#### Cons

- Harder to switch to a different service.