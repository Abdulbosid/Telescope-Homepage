---
title: 'Post Modules'
published: true
author: sacha
date: 0007/01/01
blog_name: docs
---

Although Telescope can do the job just fine out of the box, a lot of people will also want to customize it to their needs. 

That's why Telescope exposes a few simple ways to extend and customize an app, such as **post modules**. And in this tutorial, we'll learn how to use this feature to add an [Embedly](http://embed.ly/) image preview to all our posts. 

### Embedly

Embedly is a great service that makes it easy to add reach media previews to any link. 

You just give it a URL (such as `http://discovermeteor.com`, for example), and it will return a JSON object containing meta-data such as the URL's title, summary, author, and image. 

As an example, here's how [Reddit](http://reddit.com) uses Embedly to automatically add a thumbnail to each posted link:

<%= figure "blog/post-modules-reddit.png", "Embedly preview thumbnails on Reddit.", "full" %>

Let's add this to Telescope!

(Note: thanks to [Murali Narasimhan](https://github.com/muralinarasimhan) for implementing an early version of this feature and inspiring me to write this tutorial!)

### Table Of Contents

Here's a brief overview of the steps we'll cover here:

1. Setting up a package to hold our code.
2. Adding a property to the `Posts` model.
3. Retrieving the thumbnail URL using the Embedly API.
4. Adding a callback on post submit.
5. Adding a template to display the thumbnail.
6. Fixing the CSS. 
7. Making the package configurable through Telescope's Settings screen. 

Let's get started :)

### The Code

This module is [hosted on Atmosphere](https://atmospherejs.com/package/telescope-module-embedly), Meteor's package library site, and its code is also [available on GitHub](https://github.com/TelescopeJS/telescope-module-embedly/). 

### Working With Local Packages

I mentioned earlier we want to *extend* Telescope. In other words, we don't just want to randomly add new code to our codebase, but instead find a way to *add functionality* to any Telescope app. 

Thankfully, Telescope has been written with extensibility in mind, and it turns out we can do everything we need to do through **packages**. 

You might already be familiar with the default Meteor packages like `accounts-ui` or `autopublish`. Or maybe you've installed [Meteorite](https://github.com/oortcloud/meteorite/) and downloaded third-party packages from [Atmosphere](http://atmospherejs.com). 

But there's actually a third kind of packages: **local packages**. 

Unlike Meteorite packages, these are packages that sit in the `/packages` directory, and can only be used by your app. So what's the point of using a local package compared to simply modifying Telescope's core?

Well, for one it's a great way to keep things separate and well-organized. For example, you know that every line of code related to Telescope's search feature will be located in the `/packages/telescope-search` directory, instead of distributed all across the app. 

But the biggest advantage by far is when it comes to keeping your app up to date. By using packages instead of over-writing core files, you make it much easier to simply `git pull` when a few version of Telescope comes out, without having to worry about git conflicts. 

### Creating A Package

So we'll start out by creating a new `telescope-module-embedly` package to hold all of our Embedly code. 

Go to your Telescope directory (`git clone` the app from [GitHub](https://github.com/TelescopeJS/Telescope) if you haven't done so already) and create a new directory inside `/packages`:

```
cd packages
mkdir telescope-module-embedly
```

We'll also create a `lib` directory to hold our code inside the package:

```
cd telescope-module-embedly
mkdir lib
```

Finally, we need to tell Meteor that this is a package, and not just a random directory. We can do that by creating a `package.js` file:

```js
Package.describe({summary: "Telescope Embedly module package"});

Package.on_use(function (api) {

  api.use(['telescope-lib', 'telescope-base'], ['client', 'server']);

});
```

For now our `package.js` file only contains two things: a `Package.describe` declaration that gives out a little info on what our package does, and a `Package.on_use` block. 

The `Package.on_use` block is where you declare a package's dependencies and files. For now we'll only declare two dependencies: `telescope-lib` and `telescope-base`, both of which we want to include on both client and server. 

`telescope-lib` contains a few useful utility functions, while `telescope-base` contains the core data structures that make Telescope extensible. 

We'll come back to `package.js` later, but let's move on for now. All that's left to do is activate the package with:

```
meteor add telescope-module-embedly
```

Three things should happen as a result: 

1. Meteor will create a `.build` directory that contains a bunch of package stuff. Don't worry about it. 
2. Meteor will also create a `.gitignore` file to keep that `.build` directory out of your git repo. 
3. Meteor will add `telescope-module-embedly` to the `.meteor/packages` file that lists all active packages. 

### The `Posts` Model

Now that we have a package to put our code in, we can start building out our new thumbnail feature. 

But before we can worry about retrieving and displaying thumbnails, we need to think about how we'll store that data in the first place. 

Telescope uses the [Collection2](https://github.com/aldeed/meteor-collection2) package to generate **models** for each type of documents (posts, comments, settings, and so on). 

So let's start out by adding a new property to the `Posts` model. Create an `embedly.js` file inside the `lib` directory, and add the following code:

```js
var thumbnailProperty = {
  propertyName: 'thumbnailUrl',
  propertySchema: {
    type: String,
    optional: true
  }
}
addToPostSchema.push(thumbnailProperty);
```

We're defining a new `thumbnailProperty` object that contains two things. First, the name of our new property (`thumbnailUrl`). Second, the structure of that property's schema, as defined by the [SimpleSchema](https://github.com/aldeed/meteor-simple-schema) package used by Collection2. 

We then push this object to the `addToPostSchema` object so that it's added to the `Posts` model whenever that model will be initialized. 
 
Since the `Posts` model is shared between client and server, we'll similarly want to share that new property with both environments. So we'll modify `package.js` to tell Meteor to include `embedly.js` on both client and server:

```js
Package.describe({summary: "Telescope Embedly module package"});

Package.on_use(function (api) {

  api.use(['telescope-lib', 'telescope-base'], ['client', 'server']);

  api.add_files(['lib/embedly.js'], ['client', 'server']);

});
```

Let's make sure that this thing worked. Run Telescope with the `meteor` command, bring it up in a browser window, open the browser console, then type:

```
postSchemaObject.thumbnailUrl
```

You should get some kind of object in return (for example: `Object {type: function, optional: true}`). If you get `undefined`, that means there was a problem somewhere along the way!

### The `getThumbnailUrl` Function

We've just created a place in which to store our new `thumbnailUrl` property. Now we need to actually fill it in. 

You'll need an Embedly API key for this, so now would be a good time to [sign up for the service](http://embed.ly/api) if you haven't done so yet. Don't worry, it's free!

At this point, we don't know much about Embedly but we can already imagine what our function will look like. We'll pass it a URL. If everything goes as planned and we get a thumbnail URL in return we'll return that. If not, we'll catch an error and return `null`:

```js
var getThumbnailUrl = function (url) {
  try {

    // do Embedly magic

    return thumbnailUrl

  } catch (error) {

    console.log(error)
    return null;

  }
}
```

Embedly's own [Meteor tutorial](http://blog.embed.ly/post/51813567500/meteor-tutorial-using-embedly-in-your-meteor-app) gives us some clues as to how to proceed. 

For example, I noticed they were using Meteor's `Meteor.http.get()` function, which happens to be part of the `http` package. This means we first need to add it to our list of dependencies in `package.js`:

```js
Package.describe({summary: "Telescope Embedly module package"});

Package.on_use(function (api) {

  api.use(['telescope-lib', 'telescope-base'], ['client', 'server']);

  api.use(['http'], ['server']);

  api.add_files(['lib/embedly.js'], ['client', 'server']);

});
```

Notice we're only adding the `http` package on the *server*, and not the client. We need to choose where to make our API calls from, and in this case we choose the server.

Since we'll be working on the server, let's go ahead and create a `server` directory inside `telescope-module-embedly/lib` to store our code. 

I then looked at [the Embedly Extract documentation](http://embed.ly/docs/extract/api/endpoints/1/extract#response-attributes) to see what kind of object we would get in return. 

But I didn't want to simply hotlink (i.e. embed directly) images from third-party sites. Not only can this drive the bandwidth costs of the site you're embedding from up, it also exposes you to broken (or worse!) images. Thankfully, Embedly also provide a caching/resizing service called [Embedly Display](http://embed.ly/docs/display/api/endpoints/1/display/resize). 

What's more, Embedly Display [automatically integrates](http://embed.ly/docs/display/api/integration) with Embedly Extract if you just add the right parameter. 

Putting all of this together, we can at last complete the `getThumbnailUrl` function. Create a new `get_thumbnail_url.js` file inside `/lib/server` and write:


```js
getThumbnailUrl = function (url) {
  var extractBase = 'http://api.embed.ly/1/extract';
  var embedlyKey = '051399bed91d4d0d9b4f4cd7cf87a6f2';
  try {
    var result = Meteor.http.get(extractBase, {
      params: {
        key: embedlyKey,
        url: url,
        image_width: 200
      }
    });

    if(!result.data.images.length) // we found a URL, but no images
      throw new Error("Couldn't find an image!");
    
    var thumbnailUrl = result.data.images[0].url;

    return thumbnailUrl;
  } catch (error) {
    console.log(error)
    return null;
  }
}
```

Remember that this only executes on the server, so we can't just test it from the browser console. Instead, we'll create a simple [Meteor method](http://docs.meteor.com/#meteor_methods) to make sure everything is working:

```js
Meteor.methods({
  testGetThumbnailUrl: function (url) {
    console.log(getThumbnailUrl(url))
  }
})
```

To try it out, type the following in your browser console:

```js
Meteor.call('testGetThumbnailUrl', 'http://discovermeteor.com')
```

Now remember that `testGetThumbnailUrl` get executed on the *server*, so its `console.log` will output to the terminal, not the browser console. If it worked, you should get something like this:

```
http://i.embed.ly/1/image/resize?url=https%3A%2F%2Fwww.discovermeteor.com%2Fimages%2Fcontents-illustration.png&key=386ad471df374e12ae61b1af9a2acaa1&width=200
```

Or, in a more visual format:

<%= figure "http://i.embed.ly/1/image/resize?url=https%3A%2F%2Fwww.discovermeteor.com%2Fimages%2Fcontents-illustration.png&key=386ad471df374e12ae61b1af9a2acaa1&width=200", "Embedly's thumbnail for Discover Meteor", "no-border shrink" %>


<% note do %>

### API Keys & Security

You probably noticed that our Embedly API key was included right there in the image's URL. The only way around that seems to be caching the image locally ourselves inside MongoDB or on something like Amazon S3. 

This would mean a lot of extra work, so we'll just leave our API key exposed. Don't worry though, you can [restrict access to specific referrers](http://embed.ly/docs/authentication#restricting-access) through your Embedly dashboard, making it harder for others to use your API key. 

<% end %>

### Running the Function

We have our `getThumbnailUrl` function, but we don't want it to just *sit* there. It needs to actually be triggered every time someone adds a new post, otherwise what's the point?

When a new post is added to Telescope, a `post` object containing all of the new post's properties is first generated, then inserted into the database. 

In between those two steps, we have a chance to execute a series of callbacks that can extend that `post` object. 

First, let's define that callback function (still in `get_thumbnail_url.js`):

```js
var extendPost = function (post) {
  if(post.url){ // not all posts have URLs!
    var thumbnailUrl = getThumbnailUrl(post.url);
    if(thumbnailUrl)
      post.thumbnailUrl = thumbnailUrl;
  }
  return post;
}
```

We'll then add it to the `postSubmitServerCallbacks` array, which contains a list of all the callbacks to run on post submission:

```js
postSubmitServerCallbacks.push(extendPost);
```

Let's try it out! Post a new link to Telescope (taking care that it points to a real site with at least one image), then open up your browser console and type:

```js
Posts.findOne('fcKfgRL4zGkSkQEzW').thumbnailUrl
```

(Replace "fcKfgRL4zGkSkQEzW" with the post's ID, which you can get from the URL when browsing a post's page)

You should get the thumbnail URL in return!

### Displaying the Thumbnail with a Post Module

Now on to the fun part: actually displaying the thumbnail. 

Here's what a Telescope post typically looks like:

<%= figure "blog/post-modules-1.png", "A Telescope post.", "full" %>

This post is being displayed by the `post_item` template, which is itself broken down into multiple *post modules*. 

Namely, the `postUpvote`, `postContent`, `postCategories`, `postShare`, and `postDiscuss` modules:

<%= figure "blog/post-modules-2.png", "Post modules.", "full" %>

What's interesting is that these modules are completely dynamic. To get a better understanding of how this works in practice, let's take a look under the hood of that `post_item` template:

```html
<template name="post_item">
  <div class="post">
    {{#each postModules}}
      {{> UI.dynamic template=template data=..}}
    {{/each}}
  </div>
</template>
```

As you can see, the template is iterating over a structure called `postModules` and using the Meteor's `UI.dynamic` helper to dynamically embed the templates contained within. 

(Note that `..` represents the parent [data context](https://www.discovermeteor.com/blog/a-guide-to-meteor-templates-data-contexts/), in this case the `post` object set by the router.)

So our task is clear: in order to add an Embedly thumbnail to each post, we need to add it to the `postModules` array. 

This time, the work will happen on the client, so let's create a `client` directory inside `lib`, and a `post_thumbnail.html` file inside that which will hold a very simple template:

```html
<template name="postThumbnail">
  <div class="{{moduleClass}}">
    {{#with post}}
      {{#if thumbnailUrl}}
        <img src="{{thumbnailUrl}}"/>
      {{/if}}
    {{/if}}
  </div>
</template>
```

The `moduleClass` helper will come from our post module definition (which we'll take care of just below), and along with the `{{post}}` helper it will be passed by our module's parent template. Don't worry though, all of this taken care of for you!

By now you know the drill, we also need to add the template to our `package.js` file, this time including it on the *client* (Meteor doesn't support server-side templates yet). And since we're now using templates, we must include the `templating` dependency as well on the client:

```js
Package.on_use(function (api) {

  api.use(['telescope-lib', 'telescope-base'], ['client', 'server']);

  api.use(['http'], ['server']);

  api.use(['templating'], ['client']);

  api.add_files(['lib/embedly.js'], ['client', 'server']);

  api.add_files(['lib/server/get_thumbnail_url.js'], ['server']);

  api.add_files(['lib/client/post_thumbnail.html'], ['client']);
});
```

Finally, go back to `embedly.js` (the file that's being shared by both client and server), and add our newly created module to the `postModules` object:

```js
postModules.push({
  template: 'postThumbnail', 
  position: 'center-left'
});
```

<% note do %>

### Module Positions

Modules can be placed at 9 different positions. From left to right: `left-left`,  `left-center`,  `left-right`,  `center-left`,  `center-center`,  `center-right`,  `right-left`,  `right-center`,  `right-right`. 

Although note that more than one module can share the same position.

<% end %>

If everything's working correctly, your thumbnail should now be showing up!

<%= figure "blog/post-modules-embedly.png", "Finally, the thumbnail appears!", "full" %>

### Fixing The CSS

Of course, that thumbnail is a little too big… Nothing a little CSS can't fix! Create a new `post_thumbnail.css` file in `client`:

```css
.post-thumbnail{
  margin-right: 0px !important;
}
.post-thumbnail img{
  width: 80px;
  display: inline-block;
  margin-right: 10px;
}
```

The `margin-right` declarations are needed because the module `div` inherits a 10px margin on the right. In this case, we remove it and put it on the `img` instead so that the module only takes up space when a thumbnail is actually present. 

As usual, don't forget to add it to your files manifest in `package.js`:

```js
api.add_files(['lib/client/post_thumbnail.html', 'lib/client/post_thumbnail.css'], ['client']);
```

Looking better already!

<%= figure "blog/post-modules-embedly-2.png", "Better :)", "full" %>

### Final Step: Using Telescope Settings

We've almost accomplished our goal, but there's still one thing preventing our module from being truly reusable: our API key is hard-coded in. 

Instead, let's make the API key user-configurable by storing it in Telescope's `Settings` collection. Just like we did with the `thumbnailUrl` property and the `Posts` model, we'll add a `embedlyKey` property to the `Settings` model.

Go back to `embedly.js` and add:

```js
var embedlyKeyProperty = {
  propertyName: 'embedlyKey',
  propertySchema: {
    type: String,
    optional: true
  }
}
addToSettingsSchema.push(embedlyKeyProperty);
```

Now visit your "Settings" page (typically at [http://localhost:3000/settings](http://localhost:3000/settings)) and scroll down all the way to the bottom. Your new property should be there!

<%= figure "blog/post-modules-settings.png", "The Embedly Key settings field", "full" %>

Paste in your own API key and click "submit" to save your settings. 

We can now put this setting to use in `get_thumbnail_url.js`: 

```js
getThumbnailUrl = function (url) {
  var extractBase = 'http://api.embed.ly/1/extract';
  var embedlyKey = getSetting('embedlyKey');

  try {
    
    if(!embedlyKey)
      throw new Error("Couldn't find an Embedly API key! Please add it to your Telescope settings.")

    var result = Meteor.http.get(extractBase, {
      params: {
        key: embedlyKey,
        url: url,
        image_width: 200
      }
    });

    // etc.
```

### Wrapping Up

There you go. With a few lines of JavaScript, HTML, and CSS code, we've been able to add a spiffy new feature to Telescope. 

What's more, we've been able to wrap up our module's server-side and client-side logic in a single, easily-imported package. This is a great example of what makes Meteor's server+client paradgigm truly unique.

Thanks to this approach, not only can we update Telescope's code codebase without affecting our package's code, but we can also seamlessly reuse the package on any Telescope instance!

And you can apply the same pattern to any kind of post module. For example, check out the code of the `telescope-tags` and `telescope-module-share` packages (included with the Telescope repo) to see other use cases. 

So it's now up to you to extend Telescope with your own features, and then share the results with the rest of the community!