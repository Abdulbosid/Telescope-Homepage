---
title: 'Hooks'
published: true
author: sacha
date: 0002/01/07
blog_name: docs
section: 2
blurb: "A complete list of hooks you can use to extend Telescope."
order: 7
---

Telescope features a comprehensive hooks system that makes it easy to extend your app.

Note that as usual when modifying Telescope, it's recommended to use hooks from within your own custom package. 

### Adding Elements

You can add elements to a hook using the `Array.push()` function. For example:

```js
viewNav = viewNav.push({
  route: 'posts_custom',
  label: 'myCustomView'
});
```

### Removing Elements

You can remove elements from a hook using Underscore's [`filter()`](http://underscorejs.org/#filter) function, which returns an array of all the values that pass a truth test. 

For example, to remove the `top` view from the `viewNav` array, you could return the array of all the menu items whose route is *not* `posts_top`:

```js
viewNav = _.filter(viewNav, function (item) {
    item.route !== "posts_top";
});
```

### Overwriting Arrays

Finally, you can also simply redefine your own array:

```js
viewNav = [
  {
    route: 'posts_custom1',
    label: 'customView1'
  },
  {
    route: 'posts_custom2',
    label: 'customView2'
  }
];
```

## Navigation Bars

#### primaryNav

You can add items to the primary navigation menu by adding items to the `primaryNav` array:

```js
primaryNav.push({
  template: 'searchNav',
  order: 50
});
```

#### secondaryNav

You can optionally also add items to a secondary navigation.

## Menus

#### viewsMenu

You can add items to the views menu by adding them to the `viewsMenu` array:

```js
viewsMenu = viewsMenu.concat([
  {
    route: 'posts_top',
    label: 'top',
    description: 'top_description' // optional
  },
  {
    route: 'posts_new',
    label: 'new',
    description: 'new_description' // optional
  }
]);
```

#### adminMenu

You can add items to the admin menu by adding them to the `adminNav` array:

```js
adminNav.push({
  route: 'categories',
  label: 'categories',
  description: 'categories_description' //optional
});
```

## Zones

#### heroModules

You can inject “hero” items (items displayed above the main post list) by adding template names to the `heroModules` array:

```js
heroModules.push({
  template: 'newsletterBanner',
  order: 20
});
```

#### footerModules

Similarly, you can also add templates to the `footerModules` array. 

```js
footerModules.push({
  template: 'customFooter',
  order: 20
});
```

## Posts 

#### addToPostSchema

You can add properties to the `Posts` collection's schema by adding them to the `addToPostSchema` array:

```js
var customProperty = {
  propertyName: 'customProperty',
  propertySchema: {
    type: String,                           // property type
    label: 'customLabel',                   // key string used for internationalization
    optional: true,                         // make this property optional
    autoform: {
      editable: true,                       // make this property editable by users
      type: "bootstrap-datetimepicker"      // assign a custom input type
    }
  }
}
addToPostSchema.push(customProperty);
```

#### postModules

The various components of a single post item. By default it includes the `postUpvote`, `postContent`, `postAvatars`, `postDiscuss`, and `postActions` templates.

#### postHeading

The `postContent` template is itself made up of two parts. `postHeading` contains the heading, domain, and categories.

#### postMeta

On the other hand, `postMeta` contains secondary information such as the author, date, and number of comments. 

#### Callbacks

Callback functions can be added to the following arrays:

```js
postSubmitClientCallbacks = [];       // runs on client before submission
postSubmitMethodCallbacks = [];       // runs on client and server before submission
postAfterSubmitMethodCallbacks = [];  // runs on server in a timeout after submission

postEditClientCallbacks = [];         // loops over post object
postEditMethodCallbacks = [];         // loops over modifier ("{$set: {foo: bar}}")
postAfterEditMethodCallbacks = [];    // loops over modifier object
```

Generally speaking, callbacks can be run at four different times during the lifetime of a Meteor method's execution:

- `rendered` callbacks (such as `commentSubmitRenderedCallbacks`) will run when a template is rendered.
- `client` callbacks (such as `postSubmitClientCallbacks`) will run on the client, just before a Meteor method is called.
- `method` callbacks (such as `postSubmitMethodCallbacks`) will run on both client and server, and are called from within a Meteor method.
- `async` callbacks (such as `postAfterSubmitMethodCallbacks`) will run on the server only, and asynchronously.

These functions will then take a document as argument, modify it, and return it. 

Here's an example from the `telescope-module-embedly` package that takes a post, pings Embedly to give it a thumbnail, and then returns the updated `post` object:

```js
var extendPost = function (post) {
  if(post.url){
    var data = getEmbedlyData(post.url);
    if(!!data && !!data.thumbnailUrl)
      post.thumbnailUrl = data.thumbnailUrl;
    if(!!data && !!data.media.html)
      post.media = data.media
  }
  return post;
}

postSubmitServerCallbacks.push(extendPost);
```

## Comments

#### addToCommentSchema

Same as `addToPostsSchema`, for the comments collection's schema.

#### Callbacks

```js
commentSubmitRenderedCallbacks = [];
commentSubmitClientCallbacks = [];
commentSubmitMethodCallbacks = [];
commentAfterSubmitMethodCallbacks = [];

commentEditRenderedCallbacks = []; 
commentEditClientCallbacks = [];
commentEditMethodCallbacks = []; // not used yet
commentAfterEditMethodCallbacks = []; // not used yet
```
## User Accounts

### userProfileDisplay

The `userProfileDisplay` hook is used to add blocks to user profile pages.

### userProfileEdit

The `userProfileDisplay` hook is used to add blocks to user *edit* pages (i.e. where people can edit their own account).

### Callbacks

Similar to posts and comments, user accounts also have their own callback hooks:

```js
userEditRenderedCallbacks = [];
userEditClientCallbacks = [];
userCreatedCallbacks = [];
userProfileCompleteChecks = [];
```

## Subscriptions

#### preloadSubscriptions

Subscriptions can be added to the `preloadSubscriptions` array to preload them before loading the rest of the app. 
You can add subscriptions to be preloaded by the router by adding them to the `preloadSubscriptions` array:

```js
preloadSubscriptions.push({subName: 'posts', subArguments: {limit: 10}});
```

## Theme Settings

Theme-specific settings can be stored in the `themeSettings` object:

```js
themeSettings.useDropdowns = true;
```
