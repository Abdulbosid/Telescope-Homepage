---
title: 'Hooks'
published: false
author: sacha
date: 0002/01/07
blog_name: docs
section: 2
blurb: "A complete list of hooks you can use to extend Telescope."
order: 7
---

Telescope features a comprehensive hooks system that makes it easy to extend your app. Here's a full list.

## Schemas

#### addToPostSchema

You can add properties to the `Posts` collection's schema by adding them to the `addToPostSchema` array:

```js
addToPostSchema.push(
  {
    propertyName: 'categories',
    propertySchema: {
      type: [CategorySchema],
      optional: true
    }
  }
);
```
#### addToCommentSchema

Same thing, for the comments collection's schema.

## Navigation Menus

#### primaryNav

You can add items to the primary navigation menu by adding items to the `primaryNav` array:

```js
primaryNav.push({
  template: 'searchNav',
  order: 50
});
```

#### secondaryNav

You can optionally also add items to a secondary navigation.

#### viewNav

You can add items to the views menu by adding them to the `viewNav` array:

```js
viewNav = viewNav.concat([
  {
    route: 'posts_top',
    label: 'top',
    description: 'top_description' // optional
  },
  {
    route: 'posts_new',
    label: 'new',
    description: 'new_description' // optional
  }
]);
```

#### adminNav

You can add items to the admin menu by adding them to the `adminNav` array:

```js
adminNav.push({
  route: 'categories',
  label: 'categories',
  description: 'categories_description' //optional
});
```

## Views

#### viewParameters

You can add post list views (like `new`, `pending`, `search`, etc.) by adding objects to the `viewParameters` array.

The parameter function should take a query terms (`terms`) object and a base parameters (`baseParameters`) object (if you want to extend common parameters), and return a `parameters` object which will be used to find the desired posts. 

This function will then be called in `lib/parameters.js`.

Note that you don't need to use `terms` and `baseParameters` in your function. Here's a simple example for the `best` view:

```js
viewParameters.best = function (terms, baseParameters) {
  return deepExtend(true, baseParameters, {
    options: {sort: {sticky: -1, baseScore: -1}}
  });
}
```

And here's a more complex example for the `search` view:

```js
viewParameters.push({
  search: function (terms, baseParameters) {
    // if query is empty, just return parameters 
    // that will result in an empty collection
    if(typeof terms.query == 'undefined' || !!terms.query)
      return {find:{_id: 0}}

    var parameters = deepExtend(true, baseParameters, {
      find: {
        $or: [
          {title: {$regex: terms.query, $options: 'i'}},
          {url: {$regex: terms.query, $options: 'i'}},
          {body: {$regex: terms.query, $options: 'i'}}
        ]
      }
    });
    return parameters;
  }
});
```

## Modules

#### heroModules

You can inject “hero” items (items displayed above the main post list) by adding template names to the `heroModules` array:

```js
heroModules.push({
  template: 'newsletterBanner',
  order: 20
});
```

#### footerModules

Similarly, you can also add templates to the `footerModules` array. 

```js
footerModules.push({
  template: 'customFooter',
  order: 20
});
```

#### postModules

See [post modules](/docs/post-modules/) section.

#### postHeading

The main post content module is itself made up of two parts. `postHeading` contains the heading, domain, and categories.

#### postMeta

On the other hand, `postMeta` contains secondary information such as the author, date, and number of comments. 

## Callbacks

Callback functions can be added to the following arrays:

```js
postSubmitRenderedCallbacks = [];
postSubmitClientCallbacks = [];
postSubmitServerCallbacks = [];

postEditRenderedCallbacks = [];
postEditClientCallbacks = [];
```

These functions will then take a document as argument, modify it, and return it. 

Here's an example from the `telescope-module-embedly` package that takes a post, pings Embedly to give it a thumbnail, and then returns the updated `post` object:

```js
var extendPost = function (post) {
  if(post.url){
    var data = getEmbedlyData(post.url);
    if(!!data && !!data.thumbnailUrl)
      post.thumbnailUrl = data.thumbnailUrl;
    if(!!data && !!data.media.html)
      post.media = data.media
  }
  return post;
}

postSubmitServerCallbacks.push(extendPost);
```

## Templates

Custom templates can be added to the `templates` object to override Telescope's default templates:

```js
templates['postInfo'] = "myCustomPostInfoTemplate";
```

## Theme Settings

Theme-specific settings can be stored in the `themeSettings` object:

```js
themeSettings.useDropdowns = true;
```

## Subscriptions

#### preloadSubscriptions

Subscriptions can be added to the `preloadSubscriptions` array to preload them before loading the rest of the app. 
You can add subscriptions to be preloaded by the router by adding them to the `preloadSubscriptions` array:

```js
preloadSubscriptions.push({subName: 'posts', subArguments: {limit: 10}});
```