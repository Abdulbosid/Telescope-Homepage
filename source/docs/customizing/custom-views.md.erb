---
title: 'Custom Views'
published: true
author: sacha
date: 0002/01/06
blog_name: docs
section: 2
blurb: 'Add your own custom sorted view for displaying posts.'
order: 6
---

In Telescope, a **view** is a specific way of sorting and filtering posts. For example, the **top**, **best**, and **new** pages all use different views. 

In addition to these default views, Telescope makes it easy to create your own custom view. 

<% note do %>

### Views vs Views

The term “view” can be a bit confusing since it can also apply to templates. Hopefully the context will be enough to make it clear which views we're talking about.

<% end %>

### View Parameters

You can add post list views (like `new`, `pending`, `search`, etc.) by adding functions to the `viewParameters` objects.

The parameter function takes a query terms (`terms`) object and return a `parameters` object which will be used to find the desired posts. 

This function will then be called from `getPostsParameters()` in `/lib/parameters.js`, which itself is used in `Posts.find()` calls on both the server and client. 

Note that you don't always need to make use of the `terms` argument in your function. For example, here's a simple example for the `best` view:

```js
viewParameters.best = function (terms) {
  return deepExtend(true, baseParameters, {
    options: {sort: {sticky: -1, baseScore: -1}}
  });
}
```

But sometimes, you do want to do something with the `terms` argument. Here's a more complex example for the `search` view, from the [telescope-search](/packages/search) package:

```js
viewParameters.push({
  search: function (terms) {
    // if query is empty, just return parameters 
    // that will result in an empty collection
    if(typeof terms.query == 'undefined' || !!terms.query)
      return {find:{_id: 0}}

    var parameters = deepExtend(true, baseParameters, {
      find: {
        $or: [
          {title: {$regex: terms.query, $options: 'i'}},
          {url: {$regex: terms.query, $options: 'i'}},
          {body: {$regex: terms.query, $options: 'i'}}
        ]
      }
    });
    return parameters;
  }
});
```

### A Practical Use Case

Here's a [user request](https://github.com/TelescopeJS/Telescope/issues/334) for a new Telescope feature:

> I would like to see an option where you can sort by what was most recently commented. I think it would be a great way to continue discussion on various posts.

That's a great idea, and a perfect opportunity to showcase the power of custom views. 

We'll create a new view that orders posts by *date of most recent comment*. Telescope happens to store that date inside each `Post` object, which means we won't have to worry about database joins (which MongoDB doesn't do anyway!).

### Get the Code

This view is [hosted on Atmosphere](https://atmospherejs.com/package/telescope-recently-commented) as a Meteorite package, and its code is also [available on GitHub](https://github.com/TelescopeJS/telescope-lens-recently-commented/).

You can add the Meteorite package with `mrt add telescope-recently-commented` (don't add it yet if you'd like to follow along with this tutorial, though).

### Creating a Package

As you've probably guessed if you've followed along other tutorials here, the first step as always will be creating a package to store our code. Let's call it `telescope-view-recently-commented` and create it in the `packages` directory:

```
cd packages
mkdir telescope-view-recently-commented
```

We'll also add a simple `package.js` manifest:

```
Package.describe({summary: "Telescope Recently Commented View"});

Package.on_use(function (api) {

  api.use(['telescope-lib', 'telescope-base'], ['client', 'server']);

  api.add_files(['lib/recently-commented.js'], ['client', 'server']);

  api.add_files(['lib/client/routes.js'], ['client']);
});
```

Like all Telescope packages, our package depends on `telescope-lib` and `telescope-base`. It then adds two files: `recently-commented.js` on both the client and server, and `routes.js` on the client only. We'll take a look at each in turn.

### Setting Up A View

Our first task is to define the view' parameters. In other words, the criteria we'll use to filter and display our posts. 

We do this through a function that outputs a JavaScript object that will in turn be used by the `Posts.find()` statement, in `recently-commented.js`:

```js
viewParameters.recentlyCommented = function () {
  return {
    options: {sort: {lastCommentedAt: -1}}
  };
}
```

<% note do %>

### Views With Arguments

Note that the view function also accepts a `terms` argument, which could for example contain the query terms passed from the router. 

Although customizing path segments without modifying the app's core codebase is not supported by Telescope yet, you can take a look at the `telescope-tags` package for an example of this pattern that relies on the `PostsListController` controller. 

<% end %>

### Routing

Now that our view is ready, we need to create a route to access it. Let's create `lib/client/routes.js` and get to work:

```js
Meteor.startup(function () {

  Router.map(function() {

    this.route('posts_recently_commented', {
      path: '/recently-commented',
      controller: PostsListController
    });

  });

});
```

Notice how we inherit from `PostsListController`. That's because we want to display a list of posts, and that controller already does all the heavy lifting for us, including automatically guessing the desired view from the current path.

All that's left is activating our package with:

```
meteor add telescope-view-recently-commented
```

Let's test our new route. Pick an older post in your local Telescope instance, and leave a comment on it. This won't influence its ranking in the `new`, `top`, or `best` views in any way. 

But now head to `http://localhost:3000/recently-commented`: your just-commented post should be first!

### Navigation

We can't ask our users to input the URL manually every time they want to access the list. So let's add a menu item. Go back to `routes.js` and add the following code after the `Meteor.startup()` block:

```js
viewsMenu.push(
  {
    route: 'posts_recently_commented',
    label: 'Recently Commented'
  }  
);
```

That's all it takes. You can now proudly admire your new view, complete with its own functional menu item:

<%= figure "blog/recently-commented.jpg", "The new “Recently Commented” menu item." %>
