---
title: 'Theming Telescope'
published: true
author: sacha
date: 0002/01/03
blog_name: docs
section: 2
blurb: "Modify Telescope's look and feel through CSS customization."
order: 3
---

There's basically two ways to theme a Telescope app: by modifying the CSS, and by modifying the templates themselves. 

Note: the code for this tutorial is available in [the Telescope repository](https://github.com/TelescopeJS/Telescope/tree/kepler/packages/telescope-theme-kepler). 

### CSS Customization

Let's start with CSS customization. You could of course just modify the original Hubble theme's CSS files, but you'd be taking the risk of seeing your modifications overwritten the next time you update Telescope. Or at the very least, you'd have to painstakingly fix all the Git conflicts that would probably arise. 

So instead, we'll keep the Hubble theme intact, and create a new package for our new theme, which we'll call “Kepler”.

First, let's create the theme directory. Navigate to your app's `packages` folder and type:

```
mkdir telescope-theme-kepler
```

(Note that the “telescope-theme” part is just a convention. You could name your directory whatever you want.)

### Creating a Package

Every package needs a `package.js` manifest. Here's ours:

```js
Package.describe({
  summary: "Telescope kepler theme",
  version: '0.1.0',
  name: "telescope-theme-kepler"
});

Package.onUse(function (api) {

  api.use(['fourseven:scss', 'telescope-theme-hubble'], ['client']);

  api.addFiles([
    'lib/client/stylesheets/screen.scss',
    ], ['client']);
  
});
```

The first line is simply the package description. We then tell Meteor what to do with the package inside the `onUse` block.

First, we specify a dependency on the `telescope-theme-hubble` theme to ensure that its CSS files get included first. All our CSS will be minified and concatenated together by Meteor once we run our app in production, so source order matters. 

After that, the `api.addFiles` call inside tells Meteor which files are included in our package (`lib/client/stylesheets/`) and in what environment to include them (`client`).

Finally, let's add the `screen.scss` file in the appropriate directory, and add a few lines of SCSS:

```scss
body {
  background: teal;
}
```

Almost ready. The last step is actually activating our new package:

```
meteor add telescope-theme-kepler
```

Here's the result: 

<%= figure "blog/telescope-teal-bg.png", "Nothing like a nice teal background.", "full" %>

### CSS Overhaul

What if you don't want to simply tweak the original theme, but overhaul it completely? Easy enough. Just deactivate it with:

```
meteor remove telescope-theme-hubble
```

Of course, in that case you'll also want to remove the dependency on Hubble (`api.use(['telescope-theme-hubble'], ['client']);`) inside your own theme's `package.js` file. 


<% note do %>

### Sassy Themes

You're free to do whatever you want inside your own package's directory as long as you provide one or more CSS/SCSS/SASS files at the end. 

Telescope automatically compiles SCSS/SASS using [meteor-scss](https://github.com/fourseven/meteor-scss/). The Hubble and Base themes in Telescope use the SCSS syntax.

<% end %>
