---
title: 'Sending Email'
published: true
author: sacha
date: 0016/01/01
blog_name: docs
section: 3
---

Telescope features a simple yet powerful email template system that automatically themes all outgoing emails with your app's colors and branding. 

### Email Templates

The [emailWrapper.handlebars](https://github.com/TelescopeJS/Telescope/blob/master/server/templates/emailWrapper.handlebars) template contains the main email wrapper that will enclose all outgoing emails. This template is responsible for styling, which means you only need so specify the body contents of the emails you want to send. 

For example, this is what the [account approved email template](https://github.com/TelescopeJS/Telescope/blob/master/server/templates/emailAccountApproved.handlebars) looks like:

```html
<span class="heading">
  {{username}}, welcome to {{siteTitle}}!
</span><br><br>

You've just been invited. 
<a href="{{siteUrl}}">Start posting</a>.
<br><br>
```

Since Telescope's email templates use the [handlebars-server](https://github.com/EventedMind/meteor-handlebars-server) package, you can create them using the same Handlebars syntax you're already familiar with. 

And just like with regular templates, you can also overwrite email templates:

```js
templates["emailAccountApproved"] = "emailAccountApproved-custom";
```

### CSS Inlining & Text Emails

Telescope will automatically inline all CSS found in a template. This means you can style each email fragment independently. For example:

```html
<style>
  .heading{
    color: green;
  }
</style>

<span class="heading">
  {{username}}, welcome to {{siteTitle}}!
</span><br><br>

You've just been invited. 
<a href="{{siteUrl}}">Start posting</a>.
<br><br>
```

Additionally, Telescope will also generate text versions of your emails for you.

### Sending Email

To send an email, you can use the `buildAndSendEmail` server-side function. It takes 4 arguments:

- `to`: the email address to send to.
- `subject`: the subject of the email.
- `template`: the name of the handlebars template to use.
- `properties`: an object containing the properties to use inside the template.

For example, assuming you have an `emailWelcome.handlebars` server-side template:

```js
var user = {
  firstName: 'Liam',
  lastName: 'Neeson',
  setOfSkills: 'special',
  email: 'liamneeson@gmail.com'
}
var subject = "Welcome to Telescope, " + user.firstName;
buildAndSendEmail(user.email, subject, 'emailWelcome', user);
```

### Test Routes

If you want to test your email templates without having to manually trigger events every time, you can preview them at the following routes:

- **Notifications**: (new comment, new reply) [/email/notification/:notificationId](http://localhost:3000/email/notification/:notificationId)
- **New User Created**: [/email/new-user/:userId](http://localhost:3000/email/new-user/:userId)
- **New Post**: [/email/new-post/:postId](http://localhost:3000/email/new-post/:postId)
- **Account Approved**: [/email/account-approved/:userId](http://localhost:3000/email/account-approved/:userId)

In each case, replace the `:id` parameter with the object's actual `_id`. So for the first route, you'd find any notification in your database and replace `:notificationId` with its `_id` property. 